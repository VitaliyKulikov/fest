<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <title>Invoking Static Methods</title>
  </properties>

  <body>
    <section name="Invoking Static Methods">
      <p>
        We will use an example to better understand FEST-Reflect's 
        <a href="http://martinfowler.com/bliki/FluentInterface.html" target="_blank">fluent interface</a> for 
        static method invocation.
      </p>
      <p>  
        Let's assume we have a simple class <code class="code">Names</code> that defines the following methods:
        <pre class="prettyprint">
<span class="kwd">class</span>&#160;<span class="typ">Names</span> {

  <span class="kwd">private static final</span>&#160;<span class="typ">List</span>&lt;String&gt; COMMON_NAMES = <span class="kwd">new</span>&#160;<span class="fnc">ArrayList</span>&lt;String&gt;();

  <span class="kwd">static void</span>&#160;<span class="fnc">clearCommon</span>() {
    COMMON_NAMES.<span class="fnc">clear</span>();
  }

  <span class="kwd">static int</span>&#160;<span class="fnc">sizeOfCommon</span>() {
    <span class="kwd">return</span> COMMON_NAMES.<span class="fnc">size</span>();
  }

  <span class="kwd">static void</span>&#160;<span class="fnc">addCommon</span>(<span class="typ">String</span> name) {
    COMMON_NAMES.<span class="fnc">add</span>(name);  
  }

  <span class="kwd">static</span>&#160;<span class="typ">String</span>&#160;<span class="fnc">getCommon</span>(<span class="kwd">int</span> index) {
    <span class="kwd">return</span> COMMON_NAMES.<span class="fnc">get</span>(index);
  }  

}</pre>
      </p>
      <p>
        The following sections compares static method invocation using Java Reflection and FEST-Reflect. We are going to 
        assume the following static import:
        <pre class="prettyprint">
<span class="kwd">import static</span> org.fest.reflect.core.Reflection.staticMethod;</pre>
      </p>
      
      <subsection name="Invoking static methods without parameters and return type 'void'">
        <p>
          Java Reflection:
          <pre class="prettyprint">
<span class="typ">Method</span> method = Names.<span class="kwd">class</span>.<span class="fnc">getMethod</span>(<span class="str">&quot;clearCommon&quot;</span>);

AccessController.<span class="fnc">doPrivileged</span>(<span class="kwd">new</span>&#160;<span class="fnc">PrivilegedAction</span>&lt;Void&gt;() {
  <span class="kwd">public</span> Void <span class="fnc">run</span>() {
    method.<span class="fnc">setAccessible</span>(<span class="kwd">true</span>);
    <span class="kwd">return null</span>;
  }
});    

method.<span class="fnc">invoke</span>(<span class="kwd">null</span>);</pre>
        </p>
        <p>
          FEST-Reflect:
          <pre class="prettyprint">
<span class="fnc">staticMethod</span>(<span class="str">&quot;clear&quot;</span>).<span class="fnc">in</span>(Names.<span class="kwd">class</span>).<span class="fnc">invoke</span>();</pre>
        </p>
      </subsection>
      
      <subsection name="Invoking static methods with parameters and return type 'void'">
        <p>
          Java Reflection:
          <pre class="prettyprint">
<span class="typ">Method</span> method = Names.<span class="kwd">class</span>.<span class="fnc">getMethod</span>(<span class="str">&quot;addCommon&quot;</span>, String.<span class="kwd">class</span>);

AccessController.<span class="fnc">doPrivileged</span>(<span class="kwd">new</span>&#160;<span class="fnc">PrivilegedAction</span>&lt;Void&gt;() {
  <span class="kwd">public</span> Void <span class="fnc">run</span>() {
    method.<span class="fnc">setAccessible</span>(<span class="kwd">true</span>);
    <span class="kwd">return null</span>;
  }
});    

method.<span class="fnc">invoke</span>(<span class="kwd">null</span>, <span class="str">&quot;Frodo&quot;</span>);</pre>        
        </p>
        <p>
          FEST-Reflect:
          <pre class="prettyprint">
<span class="fnc">staticMethod</span>(<span class="str">&quot;addCommon&quot;</span>).<span class="fnc">withParameterTypes</span>(String.<span class="kwd">class</span>)
                         .<span class="fnc">in</span>(Names.<span class="kwd">class</span>)
                         .<span class="fnc">invoke</span>(<span class="str">&quot;Frodo&quot;</span>);</pre>
        </p>      
      </subsection>
      
      <subsection name="Invoking static methods without parameters and return type other than 'void'">
        <p>
          Java Reflection:
          <pre class="prettyprint">
<span class="typ">Method</span> method = Names.<span class="kwd">class</span>.<span class="fnc">getMethod</span>(<span class="str">&quot;sizeOfCommon&quot;</span>);

AccessController.<span class="fnc">doPrivileged</span>(<span class="kwd">new</span>&#160;<span class="fnc">PrivilegedAction</span>&lt;Void&gt;() {
  <span class="kwd">public</span> Void <span class="fnc">run</span>() {
    method.<span class="fnc">setAccessible</span>(<span class="kwd">true</span>);
    <span class="kwd">return null</span>;
  }
});    

<span class="kwd">int</span> size = (Integer) method.<span class="fnc">invoke</span>(<span class="kwd">null</span>);</pre>
        </p>
        <p>
          FEST-Reflect:
          <pre class="prettyprint">
<span class="kwd">int</span> size = <span class="fnc">staticMethod</span>(<span class="str">&quot;sizeOfCommon&quot;</span>).<span class="fnc">withReturnType</span>(<span class="kwd">int</span>.<span class="kwd">class</span>)
                                       .<span class="fnc">in</span>(Names.<span class="kwd">class</span>)
                                       .<span class="fnc">invoke</span>();</pre>
        </p>
      </subsection>

      <subsection name="Invoking static methods with parameters and return type other than 'void'">
        <p>
          Java Reflection:
          <pre class="prettyprint">
<span class="typ">Method</span> method = Names.<span class="kwd">class</span>.<span class="fnc">getMethod</span>(<span class="str">&quot;getCommon&quot;</span>, <span class="kwd">int</span>.<span class="kwd">class</span>);

AccessController.<span class="fnc">doPrivileged</span>(<span class="kwd">new</span>&#160;<span class="fnc">PrivilegedAction</span>&lt;Void&gt;() {
  <span class="kwd">public</span> Void <span class="fnc">run</span>() {
    method.<span class="fnc">setAccessible</span>(<span class="kwd">true</span>);
    <span class="kwd">return null</span>;
  }
});    

<span class="typ">String</span> name = (String) method.<span class="fnc">invoke</span>(<span class="kwd">null</span>, 8);</pre>        
        </p>
        <p>
          FEST-Reflect:
          <pre class="prettyprint">
<span class="typ">String</span> name = <span class="fnc">staticMethod</span>(<span class="str">&quot;getCommon&quot;</span>).<span class="fnc">withReturnType</span>(String.<span class="kwd">class</span>)
                                       .<span class="fnc">withParameterTypes</span>(<span class="kwd">int</span>.<span class="kwd">class</span>)
                                       .<span class="fnc">in</span>(Name.<span class="kwd">class</span>)
                                       .<span class="fnc">invoke</span>(8);</pre>
        </p>      
      </subsection>      
    </section>
  </body>
</document>

