<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <title>Simulating Keyboard Input</title>
  </properties>

  <body>
    <section name="Simulating Keyboard Input">
      <p>
        All FEST Fixtures can simulate user input using a keyboard. This simulation is not limited to send events to
        <code class="code">KeyListener</code>s. FEST provides true keyboard input, at the operating system level.
      </p>
      <subsection name="Pressing and Releasing One or More Keys">
        <p>
          The method &quot;<code class="code">pressAndReleaseKeys(int...)</code> can simulate a user pressing and 
          releasing one or more keys. If more than one key code is passed as parameter, this method will simulate
          pressing a key, releasing it and then will move to the next key code. Key codes are integers specified in
          <code class="code"><a href="http://java.sun.com/javase/6/docs/api/java/awt/event/KeyEvent.html" target="_blank">java.awt.event.KeyEvent</a></code>.
        </p>
        <p>
          The following example shows how to simulate a user pressing the keys &quot;A,&quot; &quot;S,&quot;
          &quot;D,&quot; &quot;F&quot; while having input focus on a text field with name &quot;username&quot;:
          <pre class="prettyprint">
// import static java.awt.event.KeyEvent.*;          
dialog.textBox(&quot;username&quot;).focus().pressAndReleaseKeys(VK_A, VK_S, VK_D, VK_F);</pre>
        </p>
        <p>
          which is similar to typing &quot;asdf&quot; on that text field.
        </p>
        <p>
          The following example shows how to simulate a user pressing the key &quot;F1&quot; while having focus on a  
          button with name &quot;configure&quot;:
          <pre class="prettyprint">
// import static java.awt.event.KeyEvent.*;          
dialog.button(&quot;configure&quot;).focus().pressAndReleaseKeys(VK_F1);</pre>
        </p>
      </subsection>
      <subsection name="Pressing a Key, Do Something Else, And Release Key">
        <p>
          The methods &quot;<code class="code">pressKey(int)</code>&quot; and 
          &quot;<code class="code">releaseKey(int)</code>&quot; can simulate a user pressing and releasing a key. 
          Although it may sound similar to what the method &quot;<code class="code">pressAndReleaseKeys(int...)</code>&quot; 
          can do, it is quite different. The &quot;<code class="code">pressAndReleaseKeys(int...)</code>&quot; simulates
          a user pressing a key and immediately releasing the same key. On the other hand,
          &quot;<code class="code">pressKey(int)</code>&quot; and &quot;<code class="code">releaseKey(int)</code>&quot;
          are two separate actions. They can be helpful when we want to simulate a case of &quot;press a key, do something
          else, and then release a key.&quot;
        </p>
        <p>
          An example will help us have a better idea what these methods are good for. In the following code listing we 
          are simulating clicking the left mouse button while having the &quot;Ctrl&quot; key pressed:
          <pre class="prettyprint">
// import static java.awt.event.KeyEvent.*;          
dialog.list(&quot;employees&quot;).pressKey(VK_CONTROL)
                        .click()
                        .releaseKey(VK_CONTROL);</pre>
        </p>
      </subsection>
    </section>
  </body>
</document>  
