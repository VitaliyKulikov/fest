<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <title>Testing Long-Duration Tasks</title>
  </properties>

  <body>
    <section name="Testing Long-Duration Tasks">
      <p>
        FEST-Swing provides support for finding GUI components <strong>after</strong> the execution of
        a long-duration task is complete. Currently, it provides the following finders:
        <ul>
          <li><code class="code">WindowFinder</code> (which can find <code class="code">Frame</code>s and
          <code class="code">Dialog</code>s)</li>
          <li><code class="code">JOptionPaneFinder</code></li>
          <li><code class="code">JFileChooserFinder</code></li>
        </ul>        
      </p>
      <p>
        All these finders are in the package <code class="code">org.fest.swing.finder</code>.
      </p>
      <subsection name="Example">
      <p>
        A good example is the main window of an application being shown after the user's credentials have been
        successfully verified. The following are the typical steps to complete such scenario:
      </p>      
      <p>
        <ul>
          <li>User launches the application</li>
          <li>A login window appears</li>
          <li>User enters her username and password and clicks the &quot;Login&quot; button</li>
          <li>User is authenticated and authorized successfully</li>
          <li>The main window of the application is displayed</li>
        </ul>
      </p>
      <p>
        The &quot;tricky&quot; part here is step 4. Authentication/authorization can take some time (depending on 
        network traffic, etc.) and we need to wait for the main window to appear in order to continue our test. It is 
        possible to test this scenario with FEST:
        <pre class="prettyprint">
loginDialog.<span class="fnc">textBox</span>(<span class="str">&quot;username&quot;</span>).<span class="fnc">enterText</span>(<span class="str">&quot;yvonne&quot;</span>);
loginDialog.<span class="fnc">textBox</span>(<span class="str">&quot;password&quot;</span>).<span class="fnc">enterText</span>(<span class="str">&quot;welcome&quot;</span>);
loginDialog.<span class="fnc">button</span>(<span class="str">&quot;login&quot;</span>).<span class="fnc">click</span>();
    
<span class="com">// now the interesting part, we need to wait till the main window is shown.</span>&#160;          
<span class="typ">FrameFixture</span> mainFrame = <span class="fnc">findFrame</span>(<span class="str">&quot;main&quot;</span>).<span class="fnc">using</span>(loginDialog.robot);

<span class="com">// we can continue testing the main window.</span></pre>
      </p>
      <p>
        The &quot;<code class="code">findFrame</code>&quot; method (statically imported from 
        <code class="code">org.fest.swing.finder.WindowFinder</code>) can lookup a <code class="code">Frame</code> 
        (having &quot;main&quot; as its name) with a default timeout of 5 seconds. That means that if in 5 seconds the 
        frame we are looking for is not found, the test will fail. 
      </p>
      <p>  
        We can also specify a custom value for the timeout. For example, we can set the timeout to 10 seconds in two ways:
        <pre class="prettyprint">
<span class="com">// import static org.fest.swing.finder.WindowFinder.findFrame;</span>&#160;          
<span class="typ">FrameFixture</span> mainFrame = 
  <span class="fnc">findFrame</span>(<span class="str">&quot;main&quot;</span>).<span class="fnc">withTimeout</span>(10000).<span class="fnc">using</span>(loginDialog.robot);
<span class="com">// or</span>&#160;          
<span class="typ">FrameFixture</span> mainFrame = 
  <span class="fnc">findFrame</span>(<span class="str">&quot;main&quot;</span>).<span class="fnc">withTimeout</span>(10, SECONDS).<span class="fnc">using</span>(loginDialog.robot);</pre>        
      </p>      
      <p>
        We can also look up Frames by type:
        <pre class="prettyprint">
<span class="typ">FrameFixture</span> mainFrame = <span class="fnc">findFrame</span>(MainFrame.<span class="kwd">class</span>).<span class="fnc">using</span>(loginDialog.robot);</pre>
      </p>
      <p>
        Something that you may find weird in the code examples is &quot;<code class="code">using(loginDialog.robot)</code>.&quot; 
        This is necessary because, in a given test, only one instance of <code class="code">RobotFixture</code> can be 
        running, to prevent GUI tests from blocking each other on the screen. In another words, in a test class you can 
        only use one and only one instance of <code class="code">RobotFixture</code>.
      </p>    
      </subsection>   
    </section>
  </body>
</document>  
