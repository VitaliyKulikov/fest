<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <title>Component Formatters</title>
  </properties>

  <body>
    <section name="Component Formatters">
      <p>
        A component formatter is an implementation of the interface 
        <code class="code">org.fest.swing.format.ComponentFormatter</code> that creates a
        <code class="code">String</code> representation of a GUI component. FEST-Swing provides default component
        formatters for all the Swing components in the JDK. Unlike the '<code class="code">toString</code>' method
        in Swing components, the provided component formatters display only the information that can help developers
        <a href="troubleshoot.html">solve problems in functional tests</a>, excluding any information related to the
        appearance of GUI components (e.g. colors, layouts, sizes, etc.)
      </p>
      <p>
        The following are some examples of the output of the some of the provided component formatters.
        <ul>
          <li>
            <code class="code">org.fest.swing.test.TestFrame[name='frame', title='FormattingTest', enabled=true, showing=true]</code>
          </li>
          <li>
            <code class="code">javax.swing.JButton[name='button', text='A button', enabled=false]</code>
          </li>
          <li>
            <code class="code">javax.swing.JList[name='list', selectedValues=['One', 2], contents=['One', 2, 'Three', 4], selectionMode=MULTIPLE_INTERVAL_SELECTION, enabled=true]</code>
          </li>
          <li>
            <code class="code">javax.swing.JOptionPane[message='A message', messageType=ERROR_MESSAGE, optionType=DEFAULT_OPTION, enabled=true, showing=false]</code>
          </li>
          <li>
            <code class="code">javax.swing.JTabbedPane[name='tabbedPane', selectedTabIndex=1, selectedTabTitle='Second', tabCount=2, tabTitles=['First', 'Second'], enabled=true]</code>:
          </li>
        </ul>
      </p>
    </section>
    <section name="Custom Component Formatters">
      <p>
        There might be cases that you might want to create your own custom formatter to override an existing one or
        to add support for custom GUI components.
        <subsection name="Implement the ComponentFormatter interface">
          <p>
            The interface <code class="code">org.fest.swing.format.ComponentFormatter</code> provides two methods:
            <ol>
              <li>
                <p>
                  <code class="code">Class&lt;? <span class="kwd">extends</span> Component&gt; <span class="fnc">targetType</span>()</code>:<br/>
                  Returns the type of component this formatter supports. For example, by returning 
                  <code class="code">JButton.class</code> a formatter supports <code class="code">JButton</code>s 
                  <strong>and</strong> subclasses of <code class="code">JButton</code>.
                </p>  
              </li>
              <li>
                <p>
                  <code class="code">String <span class="fnc">format</span>(<span class="typ">Component</span> c)</code>:<br/>
                  Returns the <code class="code">String</code> representation of the given GUI component.
                </p>                
              </li>
            </ol>
          </p>
        </subsection>
        <subsection name="Configure an IntrospectionComponentFormatter">
          <p>
            The easiest way to create a component formatter is to configure an instance of
            <code class="code">org.fest.swing.format.IntrospectionComponentFormatter</code>, which, as the name 
            suggests, uses 
            <a href="http://java.sun.com/docs/books/tutorial/javabeans/introspection/" target="_blank">introspection</a>
            to display property values of a GUI component.
          </p>
          <p>
            The following code listing shows how to configure a <code class="code">IntrospectionComponentFormatter</code>
            to support <code class="code">JLabel</code>s (and subclasses) and the properties to show:
            <pre class="prettyprint">
<span class="typ">IntrospectionComponentFormatter</span> formatter = <span class="kwd">new</span>&#160;<span class="fnc">IntrospectionComponentFormatter</span>(JLabel.<span class="kwd">class</span>, <span class="str">&quot;name&quot;</span>, <span class="str">&quot;text&quot;</span>, <span class="str">&quot;enabled&quot;</span>);</pre>
          </p>
        </subsection>
      </p>
    </section>
  </body>
</document>

