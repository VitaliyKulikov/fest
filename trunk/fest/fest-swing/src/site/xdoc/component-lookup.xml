<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <title>GUI Component Lookup</title>
  </properties>

  <body>
    <section name="GUI Component Lookup Types">
      <p>
        FEST provides different ways to lookup a GUI component:
      </p>  
      <subsection name="By name">
        <p>
          Using a <strong>unique</strong> name for GUI components guarantees that we can always find them, regardless of 
          any change in the GUI (as long as the components have not been removed.) For example, to find a button having
          the name &quot;ok,&quot; we need to set that name in the button before we execute our tests:
<pre class="prettyprint">
<span class="typ">JButton</span> okButton = <span class="kwd">new</span>&#160;<span class="fnc">JButton</span>(<span class="str">&quot;OK&quot;</span>);
okButton.<span class="fnc">setName</span>(<span class="str">&quot;ok&quot;</span>);
</pre>
        </p>
      </subsection>
      <subsection name="By type">
        <p>
          Finding components by type is reliable as long as the GUI under test <strong>has only one component of such 
          type</strong>.
        </p>
      </subsection>
      <subsection name="Custom Search Criteria">
        <p>
          There are times when the GUI to test does not provide unique names for their components (e.g. legacy applications.)
          To overcome this limitation, FEST provides a way to specify custom search criteria using a
          <code class="code">org.fest.swing.core.GenericTypeMatcher</code>.
        </p>
        <p>
          In this example we create a <code class="code">GenericTypeMatcher</code> that matches a 
          <code class="code">JButton</code> containing the text &quot;OK&quot;:
          <pre class="prettyprint">
<span class="typ">GenericTypeMatcher</span>&lt;JButton&gt; textMatcher = <span class="kwd">new</span>&#160;<span class="fnc">GenericTypeMatcher</span>&lt;JButton&gt;() {
  <span class="lit">@Override</span>&#160;<span class="kwd">protected boolean</span>&#160;<span class="fnc">isMatching</span>(<span class="typ">JButton</span> button) {
    <span class="kwd">return</span>&#160;<span class="str">&quot;OK&quot;</span>.<span class="fnc">equals</span>(button.<span class="fnc">getText</span>());
  }
};</pre>
        </p>
        <p>
          <strong>Note: </strong>
          <code class="code">GenericTypeMatcher</code> guarantees that the component passed as
          argument in the method &quot;<code class="code">isMatching</code>&quot; is never <code class="code">null</code>.
        </p>
      </subsection>
    </section>
    <section name="Performing GUI Component Lookup">
      <p>
        Regardless of the lookup type, FEST provides two ways to perform GUI component lookup:
        <ol>
          <li><a href="container-fixture.html">Using a <code class="code">ContainerFixture</code></a></li>
          <li><a href="component-finder.html">Using <code class="code">ComponentFinder</code></a></li>
        </ol>          
      </p>
      <subsection name="ComponentLookupException">
        <p>
          FEST-Swing throws a <code class="code">ComponentLookupException</code> when a component lookup fails.
          Failures are due to one of the following reasons:
          <ul>
            <li>a component that matches the specified search criteria could not be found</li>
            <li>there is more than one component that matches the specified search criteria</li>
          </ul>
        </p>
        <p>
          The thrown <code class="code">ComponentLookupException</code> provides useful information that 
          can help us determine the source of the problem. For more details, please visit the 
          <a href="troubleshooting.html">Troubleshooting</a> section.
        </p>
      </subsection>
    </section>
  </body>
</document>