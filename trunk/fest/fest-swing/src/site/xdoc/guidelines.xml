<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <title>Guidelines for Writing Tests with FEST-Swing</title>
  </properties>

  <body>
    <section name="Guidelines for Writing Tests with FEST-Swing">
      <p>
        Writing functional tests with FEST-Swing is pretty easy and straightforward. The following are some guidelines
        that we need to follow. 
      </p>
      <subsection name="One instance of RobotFixture per test">
        <p>
          Only one instance of <code class="code">org.fest.swing.core.RobotFixture</code> can be present on a test
          method. The reason is that functional GUI tests need to be executed in a serial fashion (one at a time) simply
          because there is only one mouse and keyboard for the test to use. For example, if two or more tests run 
          concurrently and both try to move the mouse at the same time, the mouse will become irresponsive. To ensure
          sequential execution of GUI tests, FEST-Swing uses a <code class="code">org.fest.swing.core.ScreenLock</code>.
        </p>
        <p>
          The following examples show test classes (using <a href="http://testng.org" target="_blank">TestNG</a>) that 
          have only one <em>active</em>&#160;<code class="code">RobotFixture</code> per test method.
        </p>
        <p>
          One <code class="code">RobotFixture</code> as member variable: 
          <pre class="prettyprint">
<span class="kwd">public class</span> MainFrameTest {

  <span class="kwd">private</span>&#160;<span class="typ">RobotFixture</span> robot;
  
  <span class="lit">@BeforeMethod</span>&#160;<span class="kwd">public void</span>&#160;<span class="fnc">setUp</span>() {
    robot = RobotFixture.<span class="fnc">robotWithNewAwtHierarchy</span>();
  }
  
  <span class="lit">@AfterMethod</span>&#160;<span class="kwd">public void</span>&#160;<span class="fnc">tearDown</span>() {
    robot.<span class="fnc">cleanUp</span>();
  }
  
  <span class="lit">@Test</span>&#160;<span class="kwd">public void</span>&#160;<span class="fnc">shouldShowMainFrame</span>() {
    <span class="typ">FrameFixture</span> frame = <span class="kwd">new</span>&#160;<span class="fnc">FrameFixture</span>(robot, <span class="kwd">new</span>&#160;<span class="fnc">MainFrame</span>());
    frame.<span class="fnc">show</span>();
    frame.<span class="fnc">requireVisible()</span>;
  }
}</pre>
        </p>
        <p>
          One <code class="code">RobotFixture</code> as local variable in each test method: 
          <pre class="prettyprint">
<span class="kwd">public class</span> MainFrameTest {

  <span class="lit">@Test</span>&#160;<span class="kwd">public void</span>&#160;<span class="fnc">shouldShowMainFrame</span>() {
    <span class="typ">RobotFixture</span> robot = RobotFixture.<span class="fnc">robotWithNewAwtHierarchy</span>();
    <span class="typ">FrameFixture</span> frame = <span class="kwd">new</span>&#160;<span class="fnc">FrameFixture</span>(robot, <span class="kwd">new</span>&#160;<span class="fnc">MainFrame</span>());
    frame.<span class="fnc">show</span>();
    frame.<span class="fnc">requireVisible()</span>;
    robot.<span class="fnc">cleanUp</span>();
  }
}</pre>
        </p>
      </subsection>
      <subsection name="Reuse the RobotFixture from DialogFixture and FrameFixture">
        <p>
          All the component fixtures take a <code class="code">RobotFixture</code> as a parameter in their constructors.
          The classes <code class="code">DialogFixture</code> and <code class="code">FrameFixture</code>
          (both in the package <code class="code">org.fest.swing.fixture</code>) are slightly different. They also have 
          overloaded constructors that do not take a <code class="code">RobotFixture</code> as a parameter. Instead, 
          these constructors create a new one.
        </p>
        <p>
          For example, calling this constructor:
          <pre class="prettyprint">
<span class="typ">FrameFixture</span> frame = <span class="kwd">new</span>&#160;<span class="fnc">FrameFixture</span>(<span class="kwd">new</span>&#160;<span class="fnc">MainFrame</span>());</pre>
        </p>
        <p>
          is similar to:
          <pre class="prettyprint">
<span class="typ">RobotFixture</span> robot = RobotFixture.<span class="fnc">robotWithNewAwtHierarchy</span>();
<span class="typ">FrameFixture</span> frame = <span class="kwd">new</span>&#160;<span class="fnc">FrameFixture</span>(robot, <span class="kwd">new</span>&#160;<span class="fnc">MainFrame</span>());</pre>
        </p>
        <p>
          Since we can only have one active instance of <code class="code">RobotFixture</code> per test, we can
          reuse the <code class="code">RobotFixture</code> from any fixture, instead of creating a new one (which can
          result in a irresponsive test.) 
        </p>
        <p>
          <pre class="prettyprint">
<span class="typ">FrameFixture</span> frame = <span class="kwd">new</span>&#160;<span class="fnc">FrameFixture</span>(<span class="kwd">new</span>&#160;<span class="fnc">MainFrame</span>());
<span class="typ">DialogFixture</span> dialog = <span class="kwd">new</span>&#160;<span class="fnc">DialogFixture</span>(frame.robot, <span class="kwd">new</span>&#160;<span class="fnc">MyDialog</span>());</pre>        
        </p>
      </subsection>
      <subsection name="Call cleanUp() after the execution of a test method">
        <p>
          This is <strong>very important</strong>. FEST-Swing uses the mouse and keyboard to drive functional GUI tests.
          Calling the method '<code class="code">cleanUp</code>' ensures that FEST-Swing releases both the mouse
          and keyboard.
        </p>
        <p>
          The method '<code class="code">cleanUp</code>' can be called from:
          <ul>
            <li><code class="code">org.fest.swing.core.RobotFixture</code></li>          
            <li><code class="code">org.fest.swing.fixture.DialogFixture</code></li>          
            <li><code class="code">org.fest.swing.fixture.FrameFixture</code></li>          
          </ul>
        </p>
        <p>
          Please take a look at the examples in the section <a href="#One_instance_of_RobotFixture_per_test">One instance of RobotFixture per test</a>.
        </p>      
      </subsection>
    </section>
  </body>
</document>  

