/*
 * Created on Oct 31, 2007
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 * 
 * Copyright @2007 the original author or authors.
 */
package org.fest.swing.hierarchy;

import java.awt.AWTEvent;
import java.awt.Window;
import java.awt.event.AWTEventListener;
import java.util.logging.Logger;

import javax.swing.SwingUtilities;

import static org.fest.swing.util.AWTEvents.*;
import static org.fest.swing.util.AWT.quoteNameOf;
import static org.fest.util.Strings.concat;

/**
 * Understands automatic filtering of auto-generated Swing dialogs.
 * <p>
 * Adapted from <code>abbot.finder.TestHierarchy.TransientWindowListener</code> from <a
 * href="http://abbot.sourceforge.net" target="_blank">Abbot</a>.
 * </p>
 * 
 * @author Alex Ruiz
 */
public final class TransientWindowListener implements AWTEventListener {

  private static Logger logger = Logger.getLogger(TransientWindowListener.class.getName());

  private final WindowFilter filter;
  
  TransientWindowListener(WindowFilter filter) {
    this.filter = filter;
  }

  /** ${@inheritDoc} */
  public void eventDispatched(AWTEvent e) {
    if (windowOpened(e) || windowShown(e)) {
      Window w = sourceOf(e);
      logger.info(concat("Window ", quoteNameOf(w), " open/shown"));
      filter(w);
      return;
    }
    if (windowClosed(e)) {
      final Window w = sourceOf(e);
      // *Any* window disposal should result in the window being ignored, at least until it is again displayed.
      if (filter.isFiltered(w)) return;
      filter.implicitFilter(w);
      // Filter this window only *after* any handlers for this event have finished.
      logger.info(concat("Queueing dispose of ", quoteNameOf(w)));
      SwingUtilities.invokeLater(new DisposeAction(w));
    }
  }

  private Window sourceOf(AWTEvent e) {
    return (Window) e.getSource();
  }

  private void filter(Window w) {
    if (filter.isImplicitFiltered(w)) {
      logger.info(concat("un-filter window ", quoteNameOf(w)));
      filter.unfilter(w);
      return;
    }
    // Catch new sub-windows of filtered windows (i.e. dialogs generated by a test harness UI).
    filterIfParentIsFiltered(w);
  }

  private void filterIfParentIsFiltered(Window w) {
    if (!filter.isFiltered(w.getParent())) return;
    logger.info(concat("Parent is filtered, filter ", quoteNameOf(w)));
    filter.filter(w);
  }

  private class DisposeAction implements Runnable {
    private final Window w;

    DisposeAction(Window w) { this.w = w; }

    public void run() {
      // If the window was shown again since we queued this action, it will have removed the window from the 
      // implicitFiltered set, and we shouldn't filter.
      if (filter.isImplicitFiltered(w)) {
        filter.filter(w);
        logger.info(concat("Window ", quoteNameOf(w), " filtered"));
        return;
      }
      logger.info(concat("Cancel dispose of " + w.getName()));
    }
  }
}
