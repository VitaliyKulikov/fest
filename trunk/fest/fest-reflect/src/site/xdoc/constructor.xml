<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <title>Invoking Constructors</title>
  </properties>

  <body>
    <section name="Invoking Constructors">
      <p>
        We will use an example to better understand FEST-Reflect's 
        <a href="http://martinfowler.com/bliki/FluentInterface.html" target="_blank">fluent interface</a> for 
        constructor invocation.
      </p>
      <p>  
        Let's assume we have a simple class <code class="code">Circle</code> that defines two constructors:
        <pre class="prettyprint">
<span class="kwd">class</span>&#160;<span class="typ">Circle</span> {

  <span class="kwd">private final int</span> radius;
  
  <span class="fnc">Circle</span>() { <span class="kwd">this</span>(100); }
  
  <span class="fnc">Circle</span>(<span class="kwd">int</span> radius) {
    <span class="kwd">this</span>.radius = radius;
  }

}</pre>
      </p>
      <p>
        The following sections compares constructor invocation using Java Reflection and FEST-Reflect. We are going to 
        assume the following static import:
        <pre class="prettyprint">
<span class="kwd">import static</span> org.fest.reflect.core.Reflection.constructor;</pre>
      </p>
      <subsection name="Constructors without parameters">
        <p>
          The following code listing shows how to invoke, using Java Reflection, the default constructor in 
          <code class="code">Circle</code>:
          <pre class="prettyprint">
<span class="typ">Circle</span> circle = Circle.<span class="kwd">class</span>.<span class="fnc">getConstructor</span>().<span class="fnc">newInstance</span>();</pre>
        </p>
        <p>
          The following code listing invokes the same constructor using FEST-Reflect:
          <pre class="prettyprint">
<span class="typ">Circle</span> circle = <span class="fnc">constructor</span>().<span class="fnc">in</span>(Circle.<span class="kwd">class</span>).<span class="fnc">newInstance</span>();</pre>
        </p>
      </subsection>
      <subsection name="Constructors with parameters">
        <p>
          The following code listing shows how to invoke, using Java Reflection, the constructor in 
          <code class="code">Circle</code> that takes an <code class="code">int</code> parameter:
          <pre class="prettyprint">
<span class="typ">Circle</span> circle = Circle.<span class="kwd">class</span>.<span class="fnc">getConstructor</span>(<span class="kwd">int</span>.<span class="kwd">class</span>).<span class="fnc">newInstance</span>(8);</pre>
        </p>
        <p>
          The following code listing invokes the same constructor using FEST-Reflect:
          <pre class="prettyprint">
<span class="typ">Circle</span> circle = <span class="fnc">constructor</span>().<span class="fnc">withParameterTypes</span>(<span class="kwd">int</span>.<span class="kwd">class</span>).<span class="fnc">in</span>(Circle.<span class="kwd">class</span>).<span class="fnc">newInstance</span>(8);</pre>
        </p>
      </subsection>
      <p>
        As we can see, there is not too much difference between invoking constructors using Java Reflection and 
        FEST-Reflect. The main benefits of FEST-Reflect (improved readability and type safety) are more evident when
        <a href="method.html">invoking methods</a> and <a href="field.html">accessing fields</a>. 
      </p>
    </section>
  </body>
</document>
