<?xml version="1.0" encoding="UTF-8"?>
<document>

	<properties>
		<title>Welcome</title>
	</properties>

	<body>
		<section name="Welcome to the FEST Mocks Module">
			<p>
			  FEST-Mocks is a Java library which mission is to 
			  minimize potential shortcomings of <a href="http://www.mockobjects.com/" target="_blank">Mock Objects</a>.
			</p>
		  <p>
		    More information about the potential shortcomings of mocks can be found at:
		    <ul> 
  		    <li><a href="http://dev2dev.bea.com/pub/a/2007/06/mock-shortcomings.html">Mock Objects: Shortcomings and Use Cases</a></li>
	  	    <li><a href="http://www.jroller.com/page/alexRuiz?entry=mocks_for_concrete_class_can">Mock Objects: the Good, the Bad and the Ugly</a></li>
		    </ul>
		  </p>				
			<p>
				FEST-Mocks requires 
				<a href="http://java.sun.com/javase/downloads/index_jdk5.jsp" target="_blank">Java SE 5.0</a> or later
				and can be used with either 
			  <a href="http://www.junit.org" target="_blank">JUnit</a> or 
			  <a href="http://testng.org" target="_blank">TestNG</a>. 
			</p>
			<p>  
			  It can be downloaded 
			  <a href="http://code.google.com/p/fest/downloads/list" target="_blank">here</a>. For
			  <a href="http://maven.apache.org/" target="_blank">Maven 2</a> users, the project's repository can be found at 
			  <a href="http://fest.googlecode.com/svn/trunk/fest/m2/repository/" target="_blank">http://fest.googlecode.com/svn/trunk/fest/m2/repository/</a>
			  (groupId: fest, artifactId: fest-mocks).
			</p>
			<subsection name="EasyMockTemplate">
				<p>
				  One of the shortcomings of using mocks is introduction of clutter and duplication in our code. Take a look at
				  this example using <a href="http://www.easymock.org/">EasyMock</a>:
					<pre class="prettyprint">
<span class="lit">@Test</span>&#160;<span class="kwd">public void</span>&#160;<span class="fnc">shouldAddNewEmployee</span>() {
  mockEmployeeDAO.<span class="fnc">insert</span>(employee);
  <span class="fnc">replay</span>(mockEmployeeDAO);
  employeeBO.<span class="fnc">addNewEmployee</span>(employee);
  <span class="fnc">verify</span>(mockEmployeeDAO);
}
 
<span class="lit">@Test</span>&#160;<span class="kwd">public void</span>&#160;<span class="fnc">shouldUpdateEmployee</span>() {
  mockEmployeeDAO.<span class="fnc">update</span>(employee);
  <span class="fnc">replay</span>(mockEmployeeDAO);
  employeeBO.<span class="fnc">updateEmployee</span>(employee);
  <span class="fnc">verify</span>(mockEmployeeDAO);
}</pre>
				</p>
				<p>
				  The problems with the code listing above are the following:
				  <ol>
				    <li>There is no clear separation of mock expectations and code to test</li>
				    <li>Calls to <code class="code">replay</code> and <code class="code">verify</code> are duplicated</li>
				    <li>It is easy to forget to call <code class="code">replay</code> and <code class="code">verify</code> in
				    every test method, which will result in failing tests</li>
				  </ol>
				</p>
				<p>
				  A solution to this problem is FEST's <code class="code">EasyMockTemplate</code>:
				  <pre class="prettyprint">
<span class="lit">@Test</span>&#160;<span class="kwd">public void</span>&#160;<span class="fnc">shouldUpdateEmployee</span>() {
 
  <span class="kwd">new</span>&#160;<span class="fnc">EasyMockTemplate</span>(mockEmployeeDao) {
    <span class="lit">@Override</span>&#160;<span class="kwd">protected void</span>&#160;<span class="fnc">expectations</span>() {
      mockEmployeeDAO.<span class="fnc">update</span>(employee);
    }
 
    <span class="lit">@Override</span>&#160;<span class="kwd">protected void</span>&#160;<span class="fnc">codeToTest</span>() {
      employeeBO.<span class="fnc">updateEmployee</span>(employee);
    }
  }.<span class="fnc">run</span>();

}</pre>
				</p>
				<p>
				  <ul>
				    <li>We have eliminated code duplication (calls <code class="code">replay</code> and 
				    <code class="code">verify</code>)</li>
				    <li>We have a clear separation of mock expectations and code to test</li>
				    <li>We no longer have to call <code class="code">replay</code> and 
				    <code class="code">verify</code></li>
				  </ul>
				</p>
			</subsection>
		</section>
	</body>
</document>