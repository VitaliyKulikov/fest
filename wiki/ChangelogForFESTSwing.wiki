#summary Changes between releases of FEST-Swing.
#labels Featured

===[09/26/07] FEST Swing 0.6.1===
  # Added methods `radioButton` and `table` to `ContainerFixture` (superclass of `DialogFixture` and `FrameFixture`.) Now it is possible to write the following:
    {{{
      dialog.radioButton("addTax").click();
      dialog.table("results").selectCell(row(6).column(8));
    }}}  
      Many thanks to *Pavol Bernhauser*.
  # Added static methods `leftButton`, `middleButton` and `rightButton` to `MouseClickInfo`. This simplifies the API even more! For example, instead of:
    {{{ 
      dialog.textBox.click(button(LEFT_BUTTON).times(2));
    }}}
      we can write:
    {{{
      dialog.textBox.click(leftButton().times(2));
    }}}
      Many thanks to *[http://jroller.com/aalmiray Andres Almiray]*.


===[09/25/07] FEST Swing 0.6===
  # Assertion failures in all fixtures now provide better feedback. For example, the following assertion:
  {{{
      nameField.setText("Yoda"); // nameField is a JTextField
      dialog.textBox("name").requireText("Leia");
  }}}
   will fail with the following message:
{{{
      "[javax.swing.JTextField<'name'> - property:'text'] expected:<'Leia'> but was:<'Yoda'>"
}}}
  # Added support for time delays in `RobotFixture`. The following example shows how to specify a delay of 2 seconds:
  {{{
      robot.delay(2000); // or
      robot.delay(2, SECONDS);
  }}} 
  # Added method `pressAndReleaseKeys(int...)`, `pressAndReleaseKey(int)`, and `releaseKey(int)` to all fixtures. The following example:
  {{{
      dialog.textBox("name").pressAndReleaseKeys(VK_A, VK_B, VK_Z);
  }}}
   simulates a user pressing and releasing the keys 'A', 'B' and 'Z' (key codes from `java.awt.event.KeyEvent`)
  # Added method `rightClick` to all fixtures
  # Added method `doubleClick` to all fixtures
  # Added method `click(MouseButton)` to all fixtures; this method simulates a user clicking the specified mouse button. Examples:
  {{{
      dialog.textBox("name").click(LEFT_BUTTON);
      dialog.list("messages").click(RIGHT_BUTTON); 
  }}}
   `LEFT_BUTTON` and `RIGHT_BUTTON` are constants from the `enum` `MouseButton` (IOHO, a lot better than using `int` flags from `java.awt.event.InputEvent`)
  # Added method `click(MouseClickInfo)` to all fixtures; this method simulates a user clicking the specified mouse button the given number of times. Examples:
  {{{
      dialog.textBox("name").click(button(LEFT_BUTTON).times(2)); 
      dialog.list("messages").click(button(RIGHT_BUTTON).times(1));
      dialog.list("messages").click(button(RIGHT_BUTTON)); // right-clicking, 1 time is the default
  }}}
  # Added method `showPopupMenu` to all fixtures, which shows a pop-up menu on a `Component` and returns a `JPopupMenuFixture`
  # Replaced class `JTableFixture.Cell` with `TableCell`, which can be created as follows:
  {{{
      // import static org.fest.swing.fixture.TableCell.TableCellBuilder.row;

      TableCell cell = row(5).column(6);
  }}}
  # In `JTableFixture`, the methods that used to take two `int` values as the row and column indices as arguments, now take a `TableCell` as argument (reasons for these change can be found [http://www.jroller.com/alexRuiz/entry/simulating_named_parameters_in_java here])
  # Added method `cell(TableCell)` to `JTableFixture`, which returns a fixture that can manage the specified table cell. Here is an example:
  {{{
      JTableCellFixture cell = dialog.table("salesReport").cell(row(5).column(3));
      cell.showPopupMenu().menuItem("Paste").select();
      assertThat(cell.contents()).isEqualTo("84.20");
  }}}
  # Added support for `JPopupMenu`, `JRadioButton` and `JSplitPane`
  # Renamed method `contents` to `selectionContents` in `JTableFixture`
  # Removed method `testerCastedTo` from `ComponentFixture`


===[08/30/07] FEST Swing 0.5===
  # Added drag 'n drop support for `JList`, `JTable` and `JTree`. Many thanks to Fabien Barbero for his contribution.
  # Added support for custom matchers for component lookup. This feature is useful when testing GUI components that don't have an associated name (e.g. testing legacy applications.) Custom matchers are implementations of [http://fest.googlecode.com/svn/trunk/fest/fest-swing/javadocs/org/fest/swing/GenericTypeMatcher.html GenericTypeMatcher]. The following example shows how to lookup for a `JButton` that has the text 'OK':
{{{
GenericTypeMatcher<JButton> textMatcher = new GenericTypeMatcher<JButton>() {
  protected boolean isMatching(JButton button) {
    return "OK".equals(button.getText());
  }
};
dialog.button(textMatcher).click(); 
}}}
  # Added utility class [http://fest.googlecode.com/svn/trunk/fest/fest-swing/javadocs/org/fest/swing/util/Platform.html Platform], which contains platform-specific utility methods.
  # `ContainerFixture` now recognizes `JFileChooserFixture` and `JListFixture`. Many thanks to Fabien Barbero.


===[08/06/07] FEST Swing 0.5 SNAPSHOT===
  # Fixed Issue 15. Now it is possible to [http://www.jroller.com/alexRuiz/entry/following_frames_with_fest_or follow frames] with FEST.  
  # Swing module and the extensions for [http://testng.org TestNG] and [http://www.junit.org JUnit] are included in one zip file, [http://fest.googlecode.com/files/fest-swing-0.5-SNAPSHOT.zip fest-swing-0.5-SNAPSHOT.zip].

===[07/25/07] FEST Swing 0.4 - JUnit Extension===
  # Fixed Issue 3. Now it is possible to embed screenshots of failing GUI tests in JUnit's HTML report. For more details please click [http://jroller.com/alexRuiz/entry/screenshots_of_failing_gui_tests here].
  # JUnit extension released as [http://fest.googlecode.com/files/fest-swing-junit-0.4.zip   fest-swing-junit-0.4.zip].

===[07/17/07] FEST Swing 0.4===
  # Added support for more Swing components: `JTable`, `JSpinner`, `JSlider` and `JFileChooser`.
  # Separated the [http://testng.org TestNG] and [http://www.junit.org JUnit] extensions (screenshots of failing tests) into their own separate projects.
  # [http://code.google.com/p/fest/wiki/Javadocs Javadocs].
  # A "[http://code.google.com/p/fest/wiki/GettingStarted Getting Started]" guide.
  # Some bug fixes.

===[06/04/07] FEST Swing 0.3===
  # Fixed Issue 1 by adding class `ScreenLock` to guarantee real sequential execution of GUI tests, regardless of the testing framework being used ([http://www.junit.org JUnit] or [http://testng.org TestNG].)
  # Added capability to add a screenshot of the desktop to a TestNG HTML test report when a test fails (support for JUnit coming soon.) Click [http://jroller.com/page/alexRuiz?entry=screenshots_of_failures_in_test here] for more details.
  # Created annotation `@GUITest` to identify GUI tests (either at class or method level). Only screenshots of failing tests marked with this annotation are added to the test report.
  # Added support for testing `JTrees`. Many thanks to Keith Coughtrey.
  # Replaced prefix "should" with "require" in fixture assertions to make API more concise (e.g. the method "shouldBeVisible" is now "requireVisible.") Many thanks to Jeff Bay.
  # Renamed method "shouldHaveThisText" to "requireText" in interface `TextDisplayFixture`. Many thanks to Jeff Bay.
  # Removed prefix "find" from methods in `ContainerFixture` (e.g. the method "findLabel" is now "label.") Many thanks to Jeff Bay.
  # Added Maven 2 tasks for Ant for dependency management.
  # Created a Maven 2 pom.xml file for Abbot.
  # Created a Maven 2 local repository containing all FEST dependencies. This way, it is not necessary to download any dependency from a remote Maven repository when building FEST.
  # Added module fest-reflect, which provides a "fluent interface" that simplifies the usage of Java reflection:
{{{
        Person person = constructor().withParameterTypes(String.class).in(Person.class).newInstance("Yoda");
        method("setName").withParameterTypes(String.class).in(person).invoke("Luke");
        field("name").ofType(String.class).in(person).set("Anakin");
}}}
 